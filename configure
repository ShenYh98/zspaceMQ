#!/bin/bash
showhelp()
{
cat << ENDHELP
usage: configure {options}
Configure the zspaceMQ C++ Libraries.

Options:
  --help
    Display this help screen.

  --prefix=<install_prefix>
    Use the given install directory for make install.
    Default is /opt/zspaceMQ.

  --host=<host_system>
    Specify the target system architecture for cross-compilation.
    For example, --host=aarch64-linux-gnu.

  CXX=<compiler>
    Specify the C compiler to use. For example, --cc=aarch64-linux-gnu-g++.

  --no-prefix
    Use /opt/zspaceMQ as default install directory.

  --no-tests
    Do not build testsuites.

  --no-samples
    Do not build samples.

  clear
    Clear config and make script.

ENDHELP
}

############ 创建配置文件 ############
# save cwd
build=$(pwd)/build
config_file=$(pwd)/config/config.properties

tests=1
samples=1
noprefix=0
prefix=""
compiler=""
hostsystem=""
# parse arguments
while [ $# -ge 1 ]; do
    case "$1" in

    --prefix=*)
            prefix="$(echo "${1}" | awk '{print substr($0,10)}')" ;;

    CXX=*)
            compiler="$(echo "${1}" | awk '{print substr($0,5)}')" ;;

    --host=*)
            hostsystem="$(echo "${1}" | awk '{print substr($0,8)}')" ;;

    --no-prefix)
            noprefix=1 ;;

    --no-samples)
            samples=0 ;;

    --no-tests)
            tests=0 ;;

    --help)
            showhelp
            exit 0
            ;;

    clear)
            sudo rm -rf config/*
            sudo rm -rf make.sh
            exit 0
            ;;
    *)
            showhelp
            exit 1
            ;;
    esac

    shift
done

echo "" > $config_file
if [ "$noprefix" -eq 1 ]; then
    echo "PREFIX=/opt/zspaceMQ" >> $config_file
elif [ -z "$prefix" ]; then
    echo "PREFIX=/opt/zspaceMQ" >> $config_file
else
    echo "PREFIX=$prefix" >> $config_file
fi

if [ -z "$compiler" ]; then
    echo "CXX=g++" >> $config_file
else
    echo "CXX=$compiler" >> $config_file
fi

if [ -z "$hostsystem" ]; then
    echo "HOST=linux" >> $config_file
else
    echo "HOST=$hostsystem" >> $config_file
fi

echo "Configuration saved to $config_file"
echo "prefix:$prefix"
echo "compiler:$compiler"
echo "hostsystem:$hostsystem"

############ 定义生成脚本的文件名 ############
output_script="make.sh"
 
# 创建（或覆盖）生成的脚本文件
cat << 'EOF' > "$output_script"
#!/bin/bash

# 脚本名称和路径
CALLED_SCRIPT_PATH="script/make2.sh"

# 获取脚本所在目录
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# 检查是否至少有一个参数被传递
if [ "$#" -gt 1 ]; then
    echo "用法: $0 <可选参数1>"
    echo "注意: 本脚本只接受最多一个参数。"
    exit 1
fi

# 获取传入的两个参数
PARAM1="$1"
PARAM2="$2"

# 检查被调用脚本是否存在
if [ ! -f "$CALLED_SCRIPT_PATH" ]; then
    echo "错误: 脚本 $CALLED_SCRIPT_PATH 不存在"
    exit 1
fi

# 如果脚本存在且有执行权限，则调用它并传递参数
if [ -x "$CALLED_SCRIPT_PATH" ]; then
    "$CALLED_SCRIPT_PATH" "$SCRIPT_DIR" "$PARAM1" "$PARAM2"
else
    echo "错误: 脚本 $CALLED_SCRIPT_PATH 没有执行权限"
    exit 1
fi
EOF

# 给予生成的脚本执行权限
chmod +x "$output_script"
